:set -XArrows -XBangPatterns -XDataKinds -XDeriveDataTypeable -XDeriveFoldable -XDeriveFunctor -XDeriveGeneric -XDeriveTraversable -XDisambiguateRecordFields -XEmptyDataDecls -XExistentialQuantification -XExtendedDefaultRules -XExplicitForAll -XFlexibleContexts -XFlexibleInstances -XForeignFunctionInterface -XFunctionalDependencies -XGADTSyntax -XGADTs -XGeneralizedNewtypeDeriving -XHaskell2010 -XImplicitParams -XKindSignatures -XLambdaCase -XLiberalTypeSynonyms -XMagicHash -XMonadComprehensions -XMultiParamTypeClasses -XNamedFieldPuns -XNoMonoLocalBinds -XNoMonomorphismRestriction -XOverloadedStrings -XPackageImports -XPatternGuards -XPolyKinds -XPolymorphicComponents -XPostfixOperators -XQuasiQuotes -XRankNTypes -XRecordWildCards -XRecursiveDo -XScopedTypeVariables -XStandaloneDeriving -XTemplateHaskell -XTupleSections -XTypeFamilies -XTypeOperators -XTypeSynonymInstances -XUnboxedTuples -XUnicodeSyntax -XViewPatterns



:m + Control.Applicative Control.Applicative.Unicode Control.Arrow Control.Arrow.Unicode Control.Category.Unicode Control.Monad.IO.Class Control.Monad.Instances Control.Monad.Unicode Data.Bool Data.Bool.HT Data.Bool.Unicode Data.Char Data.Either Data.Eq Data.Eq.HT Data.Eq.Unicode Data.Foldable Data.Foldable.Unicode Data.Function.Unicode Data.Functor Data.Int Data.List.Unicode Data.Maybe Data.Maybe.HT Data.Monoid Data.Monoid.Unicode Data.Ord.Unicode Data.String Data.String.HT Data.Traversable Data.Tuple Data.Tuple.HT Data.Void Data.Word System.IO System.Locale System.Random Text.Read.HT

--import Data.Monoid.HT hiding ((<>))
import Control.Monad hiding (forM, forM_, mapM, mapM_, msum, sequence, sequence_)
import Data.Function
import Data.Function.Unicode hiding ((∘))
import Data.List hiding (all, and, any, concat, concatMap, cycle, elem, find, foldl', foldl, foldl1', foldl1, foldr, foldr1, mapAccumL, mapAccumR, maximum, maximumBy, minimum, minimumBy, notElem, or, product, sum)
import Data.List.Unicode hiding ((∈), (∉), (∋), (∌))
import Prelude.Unicode hiding ((∈), (∉), (∘))

import Data.Convertible
import Data.Default

import "monads-tf" Control.Monad.Trans

import qualified Data.Map    as M
import qualified Data.IntMap as IM

import qualified Data.IntSet      as IS
import qualified Data.IntSet.Lens as IS

import qualified Data.Set      as Set
import qualified Data.Set.Lens as Set

import qualified Data.HashMap.Lazy   as HML
import qualified Data.HashMap.Strict as HMS

import qualified Data.HashSet      as HS
import qualified Data.HashSet.Lens as HS

import qualified Data.Sequence      as S
import qualified Data.Sequence.Lens as S

import qualified Data.ByteString       as B hiding (putStr, putStrLn)
import qualified Data.ByteString.Char8 as B8
import qualified Data.ByteString.UTF8  as BU

import qualified Data.ByteString.Lazy       as BL hiding (putStr, putStrLn)
import qualified Data.ByteString.Lazy.Char8 as BL8
import qualified Data.ByteString.Lazy.UTF8  as BLU

import qualified Data.Text      as T
import qualified Data.Text.IO   as T
import qualified Data.Text.Lens as T

import qualified Data.Text.Lazy      as TL
import qualified Data.Text.Lazy.IO   as TL
import qualified Data.Text.Lazy.Lens as TL

import qualified Data.Vector      as V
import qualified Data.Vector.Lens as V

import qualified Data.Vector.Generic      as VG
import qualified Data.Vector.Generic.Lens as VG

import qualified Data.Vector.Mutable           as VM
import qualified Data.Vector.Generic.Mutable   as VGM
import qualified Data.Vector.Primitive         as VP
import qualified Data.Vector.Primitive.Mutable as VPM
import qualified Data.Vector.Storable          as VS
import qualified Data.Vector.Storable.Mutable  as VSM
import qualified Data.Vector.Unboxed           as VU
import qualified Data.Vector.Unboxed.Mutable   as VUM

import Prelude hiding ((.), all, and, any, concat, concatMap, elem, foldl, foldl1, foldr, foldr1, id, mapM, mapM_, maximum, minimum, notElem, or, product, sequence, sequence_, sum)



:def hoogle \x -> return $ ":!hoogle --color \"" ++ x ++ "\""
:def doc \x -> return $ ":!hoogle --color --info \"" ++ x ++ "\""



-- :set +m +t +s
:set prompt "\ESC[01;33m\STXλ\ESC[0m\STX> "



-- import qualified IPPrint
-- import qualified Language.Haskell.HsColour as HsColour
-- import qualified Language.Haskell.HsColour.Colourise as HsColour
-- import qualified Language.Haskell.HsColour.Output as HsColour
-- let myColourPrefs = HsColour.defaultColourPrefs { HsColour.conid = [HsColour.Foreground HsColour.Yellow, HsColour.Bold], HsColour.conop = [HsColour.Foreground HsColour.Yellow], HsColour.string = [HsColour.Foreground HsColour.Green], HsColour.char = [HsColour.Foreground HsColour.Cyan], HsColour.number = [HsColour.Foreground HsColour.Red, HsColour.Bold], HsColour.layout = [HsColour.Foreground HsColour.White], HsColour.keyglyph = [HsColour.Foreground HsColour.White] }
-- let myPrint = putStrLn . HsColour.hscolour (HsColour.TTYg HsColour.XTerm256Compatible) myColourPrefs False False "" False . IPPrint.pshow
-- :set -interactive-print=myPrint
